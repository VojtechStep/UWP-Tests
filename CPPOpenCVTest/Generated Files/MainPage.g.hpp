//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"

#if defined _DEBUG && !defined DISABLE_XAML_GENERATED_BINDING_DEBUG_OUTPUT
extern "C" __declspec(dllimport) int __stdcall IsDebuggerPresent();
#endif

#include "MainPage.xaml.h"

void ::CPPOpenCVTest::MainPage::InitializeComponent()
{
    if (_contentLoaded)
    {
        return;
    }
    _contentLoaded = true;
    ::Windows::Foundation::Uri^ resourceLocator = ref new ::Windows::Foundation::Uri(L"ms-appx:///MainPage.xaml");
    ::Windows::UI::Xaml::Application::LoadComponent(this, resourceLocator, ::Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation::Application);
}


/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class CPPOpenCVTest::MainPage::MainPage_obj4_Bindings 
    : public ::XamlBindingInfo::XamlBindingsBase<::Windows::Devices::Enumeration::DeviceInformation>
{
public:
    MainPage_obj4_Bindings()
    {
    }

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 4:
                this->obj4 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
        }
    }

    void ResetTemplate()
    {
    }

    int ProcessBindings(::Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs^ args)
    {
        int nextPhase = -1;
        switch(args->Phase)
        {
            case 0:
                nextPhase = -1;
                this->SetDataRoot(static_cast<::Windows::Devices::Enumeration::DeviceInformation^>(args->Item));
                if (this->_dataContextChangedToken.Value != 0)
                {
                    safe_cast<::Windows::UI::Xaml::FrameworkElement^>(args->ItemContainer->ContentTemplateRoot)->DataContextChanged -= this->_dataContextChangedToken;
                    this->_dataContextChangedToken.Value = 0;
                }
                this->_isInitialized = true;
                break;
        }
        this->Update_((::Windows::Devices::Enumeration::DeviceInformation^) args->Item, (1 << args->Phase));
        return nextPhase;
    }
private:
    // Fields for each control that has bindings.
    ::Platform::WeakReference obj4;

    // Update methods for each path node used in binding steps.
    void Update_(::Windows::Devices::Enumeration::DeviceInformation^ obj, int phase)
    {
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_Name(obj->Name, phase);
            }
        }
    }
    void Update_Name(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj4.Resolve<::Windows::UI::Xaml::Controls::TextBlock>(), obj, nullptr);
        }
    }
};

/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class CPPOpenCVTest::MainPage::MainPage_obj1_Bindings 
    : public ::XamlBindingInfo::XamlBindingsBase<::CPPOpenCVTest::MainPage>
{
public:
    MainPage_obj1_Bindings()
    {
    }

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 2:
                this->obj2 = safe_cast<::Windows::UI::Xaml::Controls::ComboBox^>(__target);
                (safe_cast<::Windows::UI::Xaml::Controls::ComboBox^>(__target))->SelectionChanged += ref new Windows::UI::Xaml::Controls::SelectionChangedEventHandler([this] (::Platform::Object^ param0, ::Windows::UI::Xaml::Controls::SelectionChangedEventArgs^ param1)
                {
                    this->GetDataRoot()->ChangePreview();
                });
                break;
        }
    }
private:
    // Fields for each control that has bindings.
    ::Windows::UI::Xaml::Controls::ComboBox^ obj2;

    // Update methods for each path node used in binding steps.
    void Update_(::CPPOpenCVTest::MainPage^ obj, int phase)
    {
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_cameras(obj->cameras, phase);
            }
        }
    }
    void Update_cameras(::Windows::Foundation::Collections::IVector<::Windows::Devices::Enumeration::DeviceInformation^>^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this->obj2, obj, nullptr);
        }
    }
};

void ::CPPOpenCVTest::MainPage::Connect(int __connectionId, ::Platform::Object^ __target)
{
    switch (__connectionId)
    {
        case 2:
            {
                this->Cameras = safe_cast<::Windows::UI::Xaml::Controls::ComboBox^>(__target);
            }
            break;
        case 3:
            {
                this->Preview = safe_cast<::Windows::UI::Xaml::Controls::CaptureElement^>(__target);
            }
            break;
    }
    _contentLoaded = true;
}

::Windows::UI::Xaml::Markup::IComponentConnector^ ::CPPOpenCVTest::MainPage::GetBindingConnector(int __connectionId, ::Platform::Object^ __target)
{
    ::XamlBindingInfo::XamlBindings^ bindings = nullptr;
    switch (__connectionId)
    {
        case 1:
            {
                ::Windows::UI::Xaml::Controls::Page^ element1 = safe_cast<::Windows::UI::Xaml::Controls::Page^>(__target);
                MainPage_obj1_Bindings* objBindings = new MainPage_obj1_Bindings();
                objBindings->SetDataRoot(this);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                this->Bindings = bindings;
                element1->Loading += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::FrameworkElement^, ::Platform::Object^>(bindings, &::XamlBindingInfo::XamlBindings::Loading);
            }
            break;
        case 4:
            {
                ::Windows::UI::Xaml::Controls::TextBlock^ element4 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                MainPage_obj4_Bindings* objBindings = new MainPage_obj4_Bindings();
                objBindings->SetDataRoot(element4->DataContext);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                bindings->SubscribeForDataContextChanged(element4);
                ::Windows::UI::Xaml::DataTemplate::SetExtensionInstance(element4, bindings);
            }
            break;
    }
    return bindings;
}


